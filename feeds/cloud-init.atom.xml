<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>BlackBox Blog</title><link href="https://blackboxsw.github.io/" rel="alternate"></link><link href="https://blackboxsw.github.io/feeds/cloud-init.atom.xml" rel="self"></link><id>https://blackboxsw.github.io/</id><updated>2018-04-02T16:35:00+00:00</updated><entry><title>Cloud-init v.18.2: CLI subcommands</title><link href="https://blackboxsw.github.io/cloud-init-v182-cli-subcommands.html" rel="alternate"></link><updated>2018-04-02T16:35:00+00:00</updated><author><name>blackboxsw@gmail.com</name></author><id>tag:blackboxsw.github.io,2018-04-02:cloud-init-v182-cli-subcommands.html</id><summary type="html">&lt;p&gt;&lt;img alt="Clouds in arid landscape" src="/images/cloud_arid.png" title="Cloud-init EC2" /&gt;&lt;/p&gt;
&lt;p&gt;Cloud-init published its second release of 2018: version 18.2. Among many notable features in the &lt;a href="https://lists.launchpad.net/cloud-init/msg00144.html"&gt;18.1 release&lt;/a&gt; and the &lt;a href="https://lists.launchpad.net/cloud-init/msg00145.html"&gt;18.2 release&lt;/a&gt;, the cloud-init team has been adding some polish to our CLI tooling to make cloud-init easier to inspect and interact with. I will give a run down of some of the new commandline tools that cloud-init offers and why you might care.&lt;/p&gt;
&lt;h2&gt;status: What is cloud-init up to?&lt;/h2&gt;
&lt;p&gt;First, &lt;strong&gt;cloud-init status&lt;/strong&gt; gives simple human-readable or programmatic output for what cloud-init is doing and whether it has finished successfully. It can be used as a sanity check on a machine or in scripts to block until cloud-init has completed successfully.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ cloud-init status --long
status: running
time: Fri, &lt;span class="m"&gt;30&lt;/span&gt; Mar &lt;span class="m"&gt;2018&lt;/span&gt; 04:07:48 +0000
detail:
Running in stage: modules-config

&lt;span class="c1"&gt;# Cloud-init reports if it it still in progress&lt;/span&gt;
root@x12:~# cloud-init status --long
status: running
time: Mon, &lt;span class="m"&gt;02&lt;/span&gt; Apr &lt;span class="m"&gt;2018&lt;/span&gt; 22:16:01 +0000
detail:
Running in stage: init

&lt;span class="c1"&gt;# Error conditions are bubbled up to the CLI&lt;/span&gt;
$ cloud-init status
status: error
$ cloud-init status --long
status: error
time: Mon, &lt;span class="m"&gt;02&lt;/span&gt; Apr &lt;span class="m"&gt;2018&lt;/span&gt; 20:54:13 +0000
detail:
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ntp&amp;#39;&lt;/span&gt;, TypeError&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;argument of type &amp;#39;NoneType&amp;#39; is not iterable&amp;quot;&lt;/span&gt;,&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;People no longer have to hunt for tracebacks or errors in &lt;strong&gt;/var/log/cloud-init.log&lt;/strong&gt;. No longer would you have to parse &lt;strong&gt;/run/cloud-init/result.json&lt;/strong&gt; or &lt;strong&gt;/run/cloud-init/status.json&lt;/strong&gt; to find out what stage cloud-init is in. Any of these details are now surfaced by &lt;strong&gt;cloud-init status&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;status: blocking until cloud-init is done&lt;/h2&gt;
&lt;p&gt;There have been frequent questions in &lt;a href="https://webchat.freenode.net/?channels=cloud-init"&gt;#cloud-init channel&lt;/a&gt; about how to make custom scripts or programs block until cloud-init configuration is done. Our suggestion up until now was to deliver your own systemd unit with a dependency on &lt;strong&gt;After=cloud-init.target&lt;/strong&gt;. Now that we have &lt;strong&gt;cloud-init status --wait&lt;/strong&gt;, simple scripts can block until cloud init is done. The example below instruments a reboot-cron job which will block on cloud-init completion, creating /home/ubuntu/post-cloud-init.log the moment cloud-init succeeds:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ cat &amp;gt; /home/ubuntu/yourscript.sh &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;span class="s"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="s"&gt;set -e&lt;/span&gt;
&lt;span class="s"&gt;# Block until cloud-init completes&lt;/span&gt;
&lt;span class="s"&gt;cloud-init status --wait  &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;/span&gt;
&lt;span class="s"&gt;[ $? -ne 0 ] &amp;amp;&amp;amp; echo &amp;#39;Cloud-init failed&amp;#39; &amp;amp;&amp;amp; exit 1&lt;/span&gt;
&lt;span class="s"&gt;echo &amp;#39;Cloud-init succeeded at &amp;#39; `date -R`  &amp;gt; /home/ubuntu/post-cloud-init.log&lt;/span&gt;
&lt;span class="s"&gt;# Make your magic happen here&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;
$ chmod &lt;span class="m"&gt;755&lt;/span&gt; /home/ubuntu/yourscript.sh
$  crontab -e 
@reboot /home/ubuntu/yourscript.sh
$ sudo reboot
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;clean: Tidy up your cloud-init instance&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;cloud-init clean&lt;/strong&gt; subcommand cleans up logs and cloud-init artifacts from the instance. This is an asset for ensuring a pristine environment and great for iterative development. Cloud-init operations are gated by semaphores which live in /var/lib/cloud/sem and limit the frequency with which those actions are performed. Cloud-init caches what it can so that consumers do not repay discovery costs across every reboot. The CLI now supports removal of all semaphores, caches and optionally logs so that it appears to cloud-init as a fresh machine. The next reboot of the system will re-run all discovery and configuration. Optionally, one can provide &lt;strong&gt;--logs&lt;/strong&gt; to remove /var/log/cloud-init*log files or &lt;strong&gt;--reboot&lt;/strong&gt; to reboot the system after clean.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# --logs removes /var/log/cloud-init*.log files 
$ cloud-init clean --reboot --logs
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;collect-logs: Grab all cloud-init artifacts&lt;/h2&gt;
&lt;p&gt;For filing bugs against cloud-init, we would like to collect a set of known artifacts and files. We have now added a &lt;strong&gt;cloud-init collect-logs&lt;/strong&gt; command which tars any content useful to someone trying to triage a cloud-init failure. It simplifies filing upstream bugs as there is only one attachment to place on a bug when you send it to us.&lt;/p&gt;
&lt;p&gt;For Ubuntu specifically, we also built in apport hooks on top of this, so Ubuntu users can simply &lt;strong&gt;ubuntu-bug cloud-init&lt;/strong&gt; and you'll be prompted with a couple of questions to automatically create and attach logs to a launchpad bug.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;collect-logs&lt;/strong&gt; grabs the following:
 * /var/log/cloud-init*.log
 * /run/cloud-init
 * cloud-init package version information
 * dmesg
 * journalctl output
 * optionally, user-data configuration if &lt;strong&gt;--userdata-include&lt;/strong&gt; is specified
 * on ubuntu: &lt;strong&gt;ubuntu-bug cloud-init&lt;/strong&gt; also prompts you to tell the bug the cloud you are running on&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# Create cloud-init.tar.gz in your current working dir
$ cloud-init collect-logs
# Alternately on ubuntu
$ ubuntu-bug cloud-init
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;analyze: We care about cloud-init's performance on your cloud so you don't have to&lt;/h2&gt;
&lt;p&gt;During our release cycles we strive to get cloud-init out of your way so you can get to the important business ahead of you. To do this it is imperative for us to refine and monitor the speed with which cloud-init can get your machine configured and operational.&lt;/p&gt;
&lt;p&gt;To assess how performant cloud-init is, &lt;a href="https://launchpad.net/~raharper"&gt;Ryan Harper&lt;/a&gt; introduced a tool which takes cloud-init's event data and analyzes that data to determine how much time is spent by cloud-init in any of the discovery and configuraiton stages cloud-init runs. The &lt;strong&gt;cloud-init analyze&lt;/strong&gt; tool, similar to systemd-analyze, gives us the ability to &lt;strong&gt;show&lt;/strong&gt; total exectution time of each boot and cloud-init stage as well as &lt;strong&gt;blame&lt;/strong&gt; to biggest consumers of clock-time during a given boot.&lt;/p&gt;
&lt;p&gt;Already reports from this tool have given us leverage to avoid costly Python library imports where unnecessary and rework expensive logic during the discovery and configuration process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;show:&lt;/strong&gt; groups events according to cloud-init stages&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cloud&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;analyze&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="n"&gt;Boot&lt;/span&gt; &lt;span class="n"&gt;Record&lt;/span&gt; &lt;span class="mo"&gt;01&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;elapsed&lt;/span&gt; &lt;span class="n"&gt;since&lt;/span&gt; &lt;span class="n"&gt;completing&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;printed&lt;/span&gt; &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;@&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="n"&gt;takes&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;printed&lt;/span&gt; &lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;character&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;Starting&lt;/span&gt; &lt;span class="nl"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="mf"&gt;@00.00400&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;00.00100&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;DataSourceNoCloud&lt;/span&gt; &lt;span class="mf"&gt;@00.00800&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;00.09500&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;Finished&lt;/span&gt; &lt;span class="nl"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mf"&gt;00.15800&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; 

&lt;span class="n"&gt;Starting&lt;/span&gt; &lt;span class="nl"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;restored&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="nl"&gt;check&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;DataSourceNoCloud&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cloud&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nocloud&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;dsmode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="mf"&gt;@00.77100&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mf"&gt;00.00300&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Finished&lt;/span&gt; &lt;span class="nl"&gt;stage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mf"&gt;00.68900&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; 
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="nl"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;3.96800&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;blame:&lt;/strong&gt; orders the report by most expensive operations&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ cloud-init analyze blame

-- Boot Record &lt;span class="m"&gt;01&lt;/span&gt; --
     01.95200s &lt;span class="o"&gt;(&lt;/span&gt;modules-config/config-snap&lt;span class="o"&gt;)&lt;/span&gt;
     00.76500s &lt;span class="o"&gt;(&lt;/span&gt;modules-config/config-grub-dpkg&lt;span class="o"&gt;)&lt;/span&gt;
     00.37400s &lt;span class="o"&gt;(&lt;/span&gt;init-network/config-ssh&lt;span class="o"&gt;)&lt;/span&gt;
     00.23000s &lt;span class="o"&gt;(&lt;/span&gt;modules-config/config-apt-configure&lt;span class="o"&gt;)&lt;/span&gt;
     00.13400s &lt;span class="o"&gt;(&lt;/span&gt;init-network/config-users-groups&lt;span class="o"&gt;)&lt;/span&gt;
     00.09500s &lt;span class="o"&gt;(&lt;/span&gt;init-local/search-NoCloud&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;More info&lt;/h2&gt;
&lt;p&gt;Check out the &lt;a href="http://cloudinit.readthedocs.io/en/latest/"&gt;cloud-init Read the Docs&lt;/a&gt; for more updates on &lt;a href="http://cloudinit.readthedocs.io/en/latest/topics/capabilities.html#cli-subcommand-details"&gt;CLI subcommands&lt;/a&gt; as we add them. And, as always, join us on on &lt;a href="https://webchat.freenode.net/?channels=cloud-init"&gt;IRC @ Freenode's #cloud-init channel&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Stay tuned&lt;/h2&gt;
&lt;p&gt;Thanks for checking in, here are some thoughts in the blog bag for one of our next adventures&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;supercharge your cloud-init iterative development using lxd&lt;/li&gt;
&lt;li&gt;using python-boto3 for speedy integration testing on EC2&lt;/li&gt;
&lt;li&gt;Making EC2 and OpenStack boots faster&lt;/li&gt;
&lt;li&gt;cloud-init cloud-config schema annotations and why humans stink&lt;/li&gt;
&lt;/ul&gt;</summary><category term="cloud-init"></category><category term="scripting"></category><category term="CLI"></category></entry><entry><title>Seed snaps using MAAS</title><link href="https://blackboxsw.github.io/seed-snaps-using-maas.html" rel="alternate"></link><updated>2018-01-22T22:31:00+00:00</updated><author><name>blackboxsw@gmail.com</name></author><id>tag:blackboxsw.github.io,2018-01-22:seed-snaps-using-maas.html</id><summary type="html">&lt;p&gt;Or otherwise entitled: Where my week went....&lt;/p&gt;
&lt;p&gt;MAAS quickly deploys machines by providing configuration to the fast path installer &lt;a href="http://curtin.readthedocs.io"&gt;curtin&lt;/a&gt;. &lt;a href="https://snapcraft.io"&gt;Snappy&lt;/a&gt; supports setting up a seed directory containing local snaps and snap assertions which snapd installs on first boot. This post below is a catalog of how I seeded some local snaps which got subsequently installed as the MAAS-deployed node booted.&lt;/p&gt;
&lt;p&gt;TLDR: Use &lt;a href="https://cloudinit.readthedocs.io/en/latest/topics/modules.html#snappy"&gt;cloud-init&lt;/a&gt; :)&lt;/p&gt;
&lt;h2&gt;Snappy seed directory&lt;/h2&gt;
&lt;p&gt;As of snap version 2.30, seed directories can be provided to a system image by creating a seed directory in an image the looks like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/var/lib/snapd/seed/seed.yaml  # yaml manifest of snaps to install
/var/lib/snapd/seed/snaps      # local *.snap files
/var/lib/snapd/seed/assertions # assert files for each snap
/var/lib/snapd/seed/generic.account-key  # an account assert file
/var/lib/snapd/seed/generic.account  # an account type assert file
/var/lib/snapd/seed/generic-classic.model  # a model type assert file
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Shell: create the seed directory&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir -p /var/lib/snapd/seed/snaps /var/lib/snapd/seed/assertions;
cd /var/lib/snapd/seed/snaps;
# Download the published snaps and their related assert files
# core snap is required for seeding
snap download core; snap download &lt;span class="nt"&gt;&amp;lt;yourpublishedsnap&amp;gt;&lt;/span&gt; # optionally provide --edge or --beta channel;

# Move assert files downloaded into assertions subdir
mv *assert ../assertions;
cd ../assertions;

# Create model and account assertions
snap known --remote model series=16 model=generic-classic brand-id=generic &amp;gt; generic-classic.model;

ACCOUNT_KEY=`awk &amp;#39;/sign-key-sha3-384/{print $2}&amp;#39; generic-classic.model`;

snap known --remote account-key public-key-sha3-384=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;ACCOUNT_KEY&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; &amp;gt; generic.account-key;

snap known --remote account account-id=generic &amp;gt; generic.account;

# Create the seed.yaml: the manifest of snaps to install
echo &amp;quot;snaps:&amp;quot; &amp;gt; /var/lib/snapd/seed/seed.yaml;
for assertfile in *assert; do
    awk &amp;#39;/snap-name/{SNAP=$2} /snap-revision:/ {VERSION=$2} END {printf &amp;quot; - name: %s\n   channel: stable\n   file: %s_%s.snap\n&amp;quot;, SNAP, SNAP , VERSION} &lt;span class="nv"&gt;$assertfile&lt;/span&gt; &amp;gt;&amp;gt; /var/lib/snapd/seed/seed.yaml;
done;
# Note classic snaps require a &amp;quot;classic: true&amp;quot; attribute the seed file
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Python: create the seed directory&lt;/h3&gt;
&lt;p&gt;Here's a script I wrote in python to setup a seed dir to install core and vlc&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Simple script to create a snap seed directory.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cloudinit.util&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ensure_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;write_file&lt;/span&gt;


&lt;span class="n"&gt;SNAP_SEED_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/var/lib/snapd/seed&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download_snaps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snap_names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;targetdir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Download the provided snaps to targetdir.&lt;/span&gt;

&lt;span class="sd"&gt;    @param snap_names: List of snap names or urls to download.&lt;/span&gt;
&lt;span class="sd"&gt;    @param targetdir: The path where snaps should be downloaded.&lt;/span&gt;

&lt;span class="sd"&gt;    @return: Returns a tuple containing a list of snap filenames downloaded&lt;/span&gt;
&lt;span class="sd"&gt;        and a list of snap assert filenames downloaded.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;commands&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SNAPPY_STORE_NO_CDN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;snap&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;snap_names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;snap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;download&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;snap&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;ProcessExecutionError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;WARNING: Could not download snap &amp;#39;{snap_name}&amp;#39;: {error}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;snap_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;snap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;targetdir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;subp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*.snap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*.assert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;([],&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_local_snap_seed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snap_names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;targetdir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Creates a snap mirror in targetdir.&lt;/span&gt;

&lt;span class="sd"&gt;    Downloads the snap_names from the snapstore and creates a local&lt;/span&gt;
&lt;span class="sd"&gt;    seed directory from which snaps will be auto-installed.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;snap_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snap_names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;snapsdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;targetdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;snaps&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ensure_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snapsdir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;assertdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;targetdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;assertions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ensure_dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;assertdir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;model_out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subp&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;snap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;known&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--remote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;model&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;series=16&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;model=generic-classic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;brand-id=generic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;capture&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;write_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;assertdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;generic-classic.model&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;model_out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s1"&gt;r&amp;#39;.*sign-key-sha3-384: (?P&amp;lt;account_key&amp;gt;[^\n]+).*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;model_out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DOTALL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;account_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;account_key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;account_key_out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subp&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;snap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;known&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--remote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;account-key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;public-key-sha3-384={key}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;account_key&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
    &lt;span class="n"&gt;write_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;assertdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;generic.account-key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;account_key_out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;account_out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subp&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;snap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;known&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--remote&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;account&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;account-id=generic&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;write_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;assertdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;generic.account&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;account_out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;snapfiles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assertfiles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;download_snaps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snap_names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;snapsdir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# move assert files to assertions dir&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;assertfile&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;assertfiles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snapsdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assertfile&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                  &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;assertdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assertfile&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;seedfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;targetdir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;seed.yaml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;snaps:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;snapfile&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;snapfiles&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="c1"&gt;# For classic snaps, append &amp;#39;classic: true&amp;#39; to the specific section&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot; - name: {snap_name}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;   channel: stable&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;   file: {snap_file}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;snap_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;snap_names&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;snap_file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;snapfile&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;write_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seedfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;create_local_snap_seed&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;core&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;vlc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;SNAP_SEED_DIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Seed snaps through curtin config&lt;/h2&gt;
&lt;p&gt;Curtin provides facility to write content into the target disk by specifying &lt;a href="http://curtin.readthedocs.io/en/latest/topics/config.html#write-files"&gt;write_files configuration&lt;/a&gt; and &lt;a href="http://curtin.readthedocs.io/en/latest/topics/config.html?highlight=late_commands#stages"&gt;late_commands&lt;/a&gt;. Below is an abridged configuration section which writes the python script above in curtin's write_files and runs it in late_commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;write_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;setup_snap_seed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;create_snap_preseed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Simple script to create a snap seed directory.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

      &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt; 
      &lt;span class="c1"&gt;# rest of script&lt;/span&gt;
      &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;late_commands&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run_snap_seed_setup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;curtin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;in-target&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;--&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;create_snap_preseed&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;MAAS talking to curtin&lt;/h2&gt;
&lt;p&gt;MAAS allows you to provide custom curtin configuration to a matching node based on /etc/maas/preseeds/curtin_userdata_* files. Let's create a curtin preseed file for all amd64 xenial systems.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd /etc/maas/preseeds/;
cp curtin_userdata curtin_userdata_ubuntu_amd64_generic_xenial
# 1. Add run_snap_seed_setup line to the existing late_commands section
# 2. Add write_files section included above
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, anytime MAAS deploys ubuntu amd64 generic xenial systems, they'll all get vlc snaps installed. You can now watch all the movies you really to on any system your employer owns :).&lt;/p&gt;
&lt;h2&gt;Retrospective: better alternatives for snap installs&lt;/h2&gt;
&lt;p&gt;Since MAAS drives curtin for installs, seeding snaps in an image before the system boots is compelling in a couple of situations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MAAS can deliver a private snap to the image which is not hosted in a public snap store (firmware updates, security fixes etc)&lt;/li&gt;
&lt;li&gt;The deployed machines have limited network connectivity to the snap store behind a firewall&lt;/li&gt;
&lt;li&gt;You have some private snap credentials you don't want exposed on the deployed machines, so you keep them only on your MAAS server and use them only from curtin.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;If those cases don't necessarily apply, it is probably best to use cloud-init for the following reasons:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Since cloud-init runs after curtin MAAS-deployed nodes, you can leverage cloud-init's features 'for free'&lt;/li&gt;
&lt;li&gt;Pre-seeded snaps can't actually install until snapd starts after networking is up. This is during cloud-init's init-network stage anyway.&lt;ul&gt;
&lt;li&gt;By preseeding snaps, we have only shifted the actual snap download time into curtin's setup stage instead of cloud-init's.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use a generic approach: Cloud-init's &lt;a href="https://cloudinit.readthedocs.io/en/latest/topics/modules.html#snappy"&gt;snappy module config&lt;/a&gt; supports a simple option to declare desired snappy packages in &lt;strong&gt;#cloud-config&lt;/strong&gt; files which work on almost any cloud you need, including your MAAS managed hardware.&lt;/li&gt;
&lt;li&gt;In contrast to seeding snaps, cloud-init takes care of installing snap-core dependency automatically.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Here is a sample #cloud-config file you could provide when deploying your instance in most major clouds.&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#cloud-config
snappy:
    system_snappy: true  # allow snap installs on non-snappy systems
    packages: [canonical-livepatch]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thanks for staying in touch, I'll get back to our regularly scheduled cloud-init posts in our next post 'cloud-init subcommands'.&lt;/p&gt;</summary><category term="MAAS"></category><category term="curtin"></category><category term="cloud-init"></category><category term="snappy"></category></entry><entry><title>cloud-init IPv6 support for EC2</title><link href="https://blackboxsw.github.io/cloud-init-ipv6-support-for-ec2.html" rel="alternate"></link><updated>2017-11-18T20:16:00+00:00</updated><author><name>blackboxsw@gmail.com</name></author><id>tag:blackboxsw.github.io,2017-11-18:cloud-init-ipv6-support-for-ec2.html</id><summary type="html">&lt;p&gt;&lt;img alt="Clouds in forest" src="/images/small-nature-forest-trees-fog.jpeg" title="Cloud-init EC2" /&gt;&lt;/p&gt;
&lt;p&gt;After extensive SRU testing, Ubuntu published cloud-init version 17.1.27 to Xenial, Zesty, Artful and Bionic series. One notable feature in 17.1.27 is the automatic configuration of IPv6 adddesses associated with your EC2 instances.&lt;/p&gt;
&lt;h2&gt;What has cloud-init done for me lately?&lt;/h2&gt;
&lt;p&gt;You no longer need to provide your own network configuration to cloud-init describing IPv6, manually add IPv6 config to &lt;strong&gt;/etc/network/interfaces.d/50-cloud-init.cfg&lt;/strong&gt; or &lt;strong&gt;/etc/network/50-cloud-init.yaml&lt;/strong&gt; nor reboot your instance. Cloud-init now configures ipv4/ipv6 support for you automatically on instance first boot. Think of how much more productive your day just got without that extra reboot :).&lt;/p&gt;
&lt;h2&gt;The skinny on IPv6 in EC2&lt;/h2&gt;
&lt;p&gt;Amazon's EC2 platform supports &lt;a href="http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-migrate-ipv6.html"&gt;associating IPv6 addresses to instances&lt;/a&gt; in addition to IPv4 configuration. At the time of this article, private IPv4 network association is still mandatory for EC2 instances to communicate with Amazon's internal services.&lt;/p&gt;
&lt;p&gt;Once you've added an IPv6 CIDR to one of your virtual private clouds (VPCs) in EC2, cloud-init will discover and configure IPv6 automatically for any instance created using that VPC.&lt;/p&gt;
&lt;h2&gt;Trails and tribulations: The nitty gritty&lt;/h2&gt;
&lt;p&gt;Getting IPv6 support in cloud-init was not without a bit of code wrangling. Below are some of the hoops cloud-init jumps through to get to your network configuration.&lt;/p&gt;
&lt;h3&gt;IPv6 discovery meets chicken and egg&lt;/h3&gt;
&lt;p&gt;Due to EC2 security/provisioning limitations, there are only a couple options for an instance to discover it has an IPv6 association.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Attempt a dhcp6-discovery on all NICs and wait for either addresses or a timeouts&lt;/li&gt;
&lt;li&gt;Query the metadata service and to see which NICs are configured for IPv6 and setup dhcp6 on them.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Option 1 is a non-starter because cloud-init can't waste precious boot cycles on a 5 minute dhcp6 discovery timeout for NICs that may not even be IPv6.&lt;/p&gt;
&lt;p&gt;For option 2, how can we talk to the metadata service on the network before we actually have network set up?&lt;/p&gt;
&lt;h4&gt;Door #1 - Add random link-local address to our NIC and query EC2 metadata&lt;/h4&gt;
&lt;p&gt;DHCP4 discovery takes precious cycles we would rather not spend if can set our own static IP address. EC2's metadata has a link-local address of 169.254.169.254. Since link-local can't be forwarded by routers, we tried statically configuring a random link-local address to talk to metadata, but the service only responds to requests from the known source IPv4 address allocated to the instance. By comparison, setting a static link-local address before talking to metadata is exactly what DigitalOcean's datasource does.&lt;/p&gt;
&lt;h4&gt;Door #2 - Dhcp4 discovery on primary NIC, then query metadata&lt;/h4&gt;
&lt;p&gt;Cloud-init takes this approach because EC2 metadata service is the least expensive mechanism by which an instance can determine if it has IPv6 configured, and we can't talk to metadata without the known allocated IPv4 address. DHCP4 discovery costs us a bit of time, but Amazon's dhcp services are quick to respond w/ IP request. The metadata tells us which NICs need IPv6 though presence of &lt;strong&gt;network/interfaces/macs/&lt;mac&gt;/ipv6s&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;DCHPv4 discovery in a sandbox&lt;/h3&gt;
&lt;p&gt;We know on EC2 that our initial DHCPv4 discovery in init-local may not be the "final" network configuration because we only discover IPv6 configuration once we crawl metadata. So, we run our discovery in a temp directory sandbox to avoid side-effects produced by &lt;strong&gt;dhcp-script&lt;/strong&gt; or precipitating dhcplease files on the filesystem. This contained environment allows us to consume the minimal information we need to talk to the metadata service: our IP, mask, broadcast and router. Anything else handled by the stock dhcp client is unnecessary baggage at this point in boot. Our dhcp4 discovery takes us 0.033 seconds (that is 33 thousandths!). Thanks Amazon for super responsive dhcp servers.&lt;/p&gt;
&lt;h2&gt;EC2 potential improvements&lt;/h2&gt;
&lt;p&gt;All told, this is a good win for EC2. No longer having to hack &lt;strong&gt;/etc/network/interfaces&lt;/strong&gt; or provide &lt;strong&gt;#cloud-config&lt;/strong&gt; gets folks back to a simpler start state for IPv6.&lt;/p&gt;
&lt;p&gt;Additional performance gains could be made for EC2 in the following areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3&gt;Dropping the initial dhcp4 discovery before talking to metadata.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If the EC2 platform can tell our instance what IP it should have (via /sys, DMI info of environment vars), we can statically configure our address and crawl the metadata address without sandbox DHCP discovery. This would further expedite EC2 instance startup.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3&gt;EC2 metadata needs to present enough information that we could statically configure the NICs without the need to talk to dhcp at all.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;EC2 metadata doesn't currently have enough info about the IPv4 IPv6 network config to statically setup routes, so we have to rely on dhcp4/6 clients.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Caveat&lt;/em&gt;: EC2 platform may rely on that dhcp discovery for some service and security setup that prevents this from being a viable solution.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Stay tuned&lt;/h2&gt;
&lt;p&gt;Thanks for sticking with me. Stay tuned for future posts about other cloud-init 17.1 features such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;using python-boto3 for speedy integration testing on EC2&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;cloud-init CLI commands&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Making EC2 boots faster&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;cloud-init cloud-config schema annotations&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="aws"></category><category term="ec2"></category><category term="cloud-init"></category><category term="IPv6"></category></entry><entry><title>From docs to Schema</title><link href="https://blackboxsw.github.io/from-docs-to-schema.html" rel="alternate"></link><updated>2017-08-04T18:09:00+00:00</updated><author><name>blackboxsw@gmail.com</name></author><id>tag:blackboxsw.github.io,2017-08-04:from-docs-to-schema.html</id><summary type="html">&lt;p&gt;Is there an echo in here? When looking through cloud-config modules it seemed there was a lot of boilerplate documentation and logic in each module to document and validate accepted configuration keys for the module.&lt;/p&gt;
&lt;h1&gt;Houston, we have a problem&lt;/h1&gt;
&lt;h2&gt;Problem 1: Doc rot&lt;/h2&gt;
&lt;p&gt;Cloud-init has 51 python modules which define the configuration functions for cloud-config features. Each module has a set of supported YAML configuration options which are documented @ http://cloudinit.readthedocs.io. Documentation of new configuration options need to be updated with changes to module supported options. We're all (mostly) human, and here's where our friend "doc rot" enters our project.  It is easy to forget to update documentation to match changed features.&lt;/p&gt;
&lt;h2&gt;Problem 2: Repetitive docs and configuration option parsing&lt;/h2&gt;
&lt;p&gt;Each cloud-config module has a boilerplate reStructured text docstring describing all configuration option for the module. Most modules also check presence of a top-level configuration key before parsing or skipping a given config. This key definition could be encoded in a simple structure which can be sourced for both documentation and initial config parse. Let's observe a DRY approach to docs and module configuration definitions.&lt;/p&gt;
&lt;h2&gt;Problem 3: Absent config validation&lt;/h2&gt;
&lt;p&gt;Most cloud-config modules do little validation on the configuration options provided to each module. While appearing flexible, the lack of validation ultimately costs the user time and clarity due to terse KeyError or ValueError tracebacks which could be better handled if more strict validation were performed.&lt;/p&gt;
&lt;h1&gt;Solution: One schema to rule them all&lt;/h1&gt;
&lt;p&gt;Performing validation using a strict declarative schema has the following benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a declared schema is an &lt;strong&gt;explicit API contract&lt;/strong&gt; between the module and the configuration making it easier to consume due to reduced ambiguity&lt;/li&gt;
&lt;li&gt;a schema definition &lt;strong&gt;improves automated testing coverage&lt;/strong&gt; by describing all supported options which can be exercised&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;avoid stale docs&lt;/strong&gt; by tightly coupling documentation to our config validation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;strict validation&lt;/strong&gt; versus permissive acceptance &lt;strong&gt;reduces cost of failures&lt;/strong&gt; by addressing invalid configuration errors exlicitly and early instead of at deployment time.&lt;/li&gt;
&lt;li&gt;performing upfront schema validation on the entire config allows for &lt;strong&gt;reporting multiple errors in one pass&lt;/strong&gt; instead of individually hitting them at runtime.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Step 1: Add JSONchema definitions for each cloud-config module from which documentation can also be generated.&lt;/h2&gt;
&lt;p&gt;The ntp module, which supports optional &lt;strong&gt;servers&lt;/strong&gt; and &lt;strong&gt;pools&lt;/strong&gt; keys, shows and easy schema which codifies each property name, type and expected format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;schema = {
    &amp;#39;id&amp;#39;: &amp;#39;cc_ntp&amp;#39;,
    &amp;#39;name&amp;#39;: &amp;#39;NTP&amp;#39;,
    &amp;#39;title&amp;#39;: &amp;#39;enable and configure ntp&amp;#39;,
    &amp;#39;description&amp;#39;: &amp;#39;Something with ntp&amp;#39;,
    &amp;#39;distros&amp;#39;: [&amp;#39;centos&amp;#39;, &amp;#39;ubuntu&amp;#39;,...],
    &amp;#39;examples&amp;#39;: [...],
    &amp;#39;properties&amp;#39;: {
        &amp;#39;ntp&amp;#39;: {
            &amp;#39;properties&amp;#39;: {
                &amp;#39;pools&amp;#39;: {
                    &amp;#39;type&amp;#39;: &amp;#39;array&amp;#39;,
                    &amp;#39;items&amp;#39;: {
                        &amp;#39;type&amp;#39;: &amp;#39;string&amp;#39;,
                        &amp;#39;format&amp;#39;: &amp;#39;hostname&amp;#39;
                    },
                    &amp;#39;uniqueItems&amp;#39;: True,
                },
                &amp;#39;servers&amp;#39;: {
                    &amp;#39;type&amp;#39;: &amp;#39;array&amp;#39;,
                    &amp;#39;items&amp;#39;: {
                        &amp;#39;type&amp;#39;: &amp;#39;string&amp;#39;,
                        &amp;#39;format&amp;#39;: &amp;#39;hostname&amp;#39;
                    },
                    &amp;#39;uniqueItems&amp;#39;: True,
                }
            },
            &amp;#39;required&amp;#39;: [],  # No required properties
            &amp;#39;additionalProperties&amp;#39;: False  # Error on unregistered properties
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Step 2: Add simple helper functions to generate sphinx docs from schema dict instead of module docstrings&lt;/h2&gt;
&lt;p&gt;The magic in sphinx doc generation is overriding the default module-level docstring behavior to make use of docs rendered from schema definition. This docstring generating callback needs to be added to your conf.py in the directory where you run sphinx:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;def generate_docstring_from_schema(app, what, name, obj, options, lines):
    &amp;quot;&amp;quot;&amp;quot;Override module docs from schema when present.&amp;quot;&amp;quot;&amp;quot;
    if what == &amp;#39;module&amp;#39; and hasattr(obj, &amp;quot;schema&amp;quot;):
        del lines[:]
        lines.extend(get_schema_doc(obj.schema).split(&amp;#39;\n&amp;#39;))

def setup(app):
    app.connect(&amp;#39;autodoc-process-docstring&amp;#39;, generate_docstring_from_schema)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the simple doc-generation from schema function is below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;SCHEMA_DOC_TMPL = &amp;quot;&amp;quot;&amp;quot;
{name}
---
**Summary:** {title}

{description}

**Internal name:** ``{id}``

**Module frequency:** {frequency}

**Supported distros:** {distros}

**Config schema**:
{property_doc}
{examples}
&amp;quot;&amp;quot;&amp;quot;

def get_schema_doc(schema):
    &amp;quot;&amp;quot;&amp;quot;Return reStructured text rendering the provided jsonschema.

    @param schema: Dict of jsonschema to render.
    @raise KeyError: If schema lacks an expected key.
    &amp;quot;&amp;quot;&amp;quot;
    schema[&amp;#39;property_doc&amp;#39;] = _get_property_doc(schema)
    schema[&amp;#39;examples&amp;#39;] = _get_schema_examples(schema)
    schema[&amp;#39;distros&amp;#39;] = &amp;#39;, &amp;#39;.join(schema[&amp;#39;distros&amp;#39;])
    return SCHEMA_DOC_TMPL.format(**schema)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Step 3: The module handler function will iterate over schema errors with jsonschema.Validator and log collected warnings for all schema infractions.&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jsonschema&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Draft4Validator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FormatChecker&lt;/span&gt;

&lt;span class="n"&gt;validator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Draft4Validator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;format_checker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FormatChecker&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;validator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter_errors&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;SchemaValidationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Step 4: Simple cmdline tools to validate cloud-config files against known schema to avoid costly errors during instance deployment.&lt;/h2&gt;
&lt;p&gt;Already included with cloud-init 0.7.9 is a minimal schema validation development tool:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python3 -m cloudinit.config.schema --help
&lt;/pre&gt;&lt;/div&gt;</summary><category term="usability"></category><category term="cloud-init"></category><category term="DRY"></category></entry></feed>